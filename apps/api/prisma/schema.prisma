generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"]
  // output   = "./generated/prisma"
  // output   = "../../../packages/app/src/prisma-generated"
}

generator typescriptInterfacesApp {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../../packages/app/src/prisma-generated.ts"
  dateType = "string"
}

generator typescriptInterfacesAppConfig {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../../packages/app-config/src/prisma-generated-types.ts"
  dateType = "string"
}

generator typescriptInterfacesApi {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../src/generated/prisma-generated-types.ts"
  dateType = "string"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../../../packages/app-config/src/generated-zod-schemas"
  // useMultipleFiles                 = true // default is false
  // writeBarrelFiles                 = false // default is true
  createInputTypes = false // default is true //! cause type error when compile nestjs
  // createModelTypes                 = false // default is true
  // addInputTypeValidation   = false // default is true
  // addIncludeType           = false // default is true
  // addSelectType            = false // default is true
  // validateWhereUniqueInput = false // default is true
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes   = true // default is false
  // useDefaultValidators = false // default is true
  coerceDate       = true // default is true
  // writeNullishInModelTypes = true // default is false
}

// generator class_validator {
//   provider = "prisma-class-validator-generator"
//   output   = "../src/generated/"
// }

datasource db {
  provider = "postgresql"
  url      = "postgresql://bao:3246@localhost:5432/gymapp"
  // url      = env("DATABASE_URL")
}

enum Language {
  vi // Vietnamese (default/fallback)
  en // English
}

model User {
  id            String    @id
  name          String    @db.Text
  email         String
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  gender        String?
  age           Int?
  avatar        String?
  // Exercise         Exercise[]
  // WorkoutPlan      WorkoutPlan[]
  // WorkoutSessionLog WorkoutSessionLog[]
  // ExerciseSetLog    ExerciseSetLog[]
  // BodyMeasurements BodyMeasurement[]

  exercises        Exercise[]
  workoutPlans     WorkoutPlan[]
  workoutSessions  WorkoutSession[]
  bodyMeasurements BodyMeasurement[]
  performedSets    PerformedSet[]

  @@unique([email])
  @@map("user")
}

enum ExerciseCategory {
  WEIGHT
  FREE_WEIGHT
  CARDIO
}

model MuscleGroup {
  id       Int     @id @default(autoincrement())
  parentId Int?
  image    String
  isActive Boolean @default(true) // For soft delete

  // relationship
  translations        MuscleGroupTranslation[]
  exercises           Exercise[]
  // ExerciseSetLog      ExerciseSetLog[]
  exerciseMuscleGroup ExerciseMuscleGroup[]
}

model MuscleGroupTranslation {
  muscleGroupId  Int
  language       Language
  name           String
  normalizedName String?
  slug           String
  muscleGroup    MuscleGroup @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)

  @@id([muscleGroupId, language])
  @@index([language])
}

model Exercise {
  id          String           @id @default(uuid())
  notes       String?
  category    ExerciseCategory
  createdBy   User             @relation(fields: [createdById], references: [id])
  createdById String
  images      String[]
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt @db.Timestamptz(6)
  isPublic    Boolean          @default(false) // Public exercises can be used by all users
  isActive    Boolean          @default(true) // For soft delete

  // relationship
  sessionExercises  SessionExercise[]
  muscleGroups      ExerciseMuscleGroup[] // Many-to-many with MuscleGroup
  translations      ExerciseTranslation[]
  templateExercises TemplateExercise[]
  MuscleGroup       MuscleGroup?          @relation(fields: [muscleGroupId], references: [id])
  muscleGroupId     Int?

  @@index([createdById, isActive])
  @@index([category])
  @@index([isPublic])
}

model ExerciseMuscleGroup {
  exerciseId    String
  muscleGroupId Int
  isPrimary     Boolean     @default(false) // True for primary muscle, false for secondary
  exercise      Exercise    @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  muscleGroup   MuscleGroup @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)

  @@id([exerciseId, muscleGroupId])
}

model ExerciseTranslation {
  exerciseId     String
  language       Language
  name           String
  normalizedName String?
  description    String?
  slug           String
  exercise       Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@id([exerciseId, language])
  @@index([language])
}

enum WorkoutPlanLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutPlanGoal {
  STRENGTH
  ENDURANCE
  BALANCE
  FLEXIBILITY
  LOOSE_WEIGHT
}

model WorkoutPlan {
  id          String            @id @default(uuid())
  cover_image String?
  level       WorkoutPlanLevel?
  isPublic    Boolean?          @default(true)
  isPremium   Boolean?          @default(false)
  isFeatured  Boolean?          @default(false)
  isSingle    Boolean?          @default(false)
  goal        WorkoutPlanGoal?
  createdBy   User              @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime          @updatedAt @db.Timestamptz(6)
  isActive    Boolean           @default(true) // For soft delete

  // relationship
  translations     WorkoutPlanTranslation[]
  workoutTemplates WorkoutTemplate[] // Sessions within this plan
  workoutSessions  WorkoutSession[] // Actual performed sessions from this plan
  // WorkoutSessionLog WorkoutSessionLog[]

  @@index([createdById])
  @@index([level])
  @@index([goal])
  @@index([isPublic])
  @@index([isFeatured])
}

model WorkoutTemplate {
  id            String      @id @default(uuid())
  order         Int // Order within the plan (Day 1, Day 2, etc.)
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  workoutPlanId String
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt @db.Timestamptz(6)
  isActive      Boolean     @default(true)

  // Relationships
  templateExercises TemplateExercise[] // Exercises in this template
  workoutSessions   WorkoutSession[] // Sessions performed from this template
  translations      WorkoutTemplateTranslation[]

  @@unique([workoutPlanId, order])
  @@index([workoutPlanId])
}

model WorkoutTemplateTranslation {
  workoutTemplateId String
  language          Language
  name              String
  normalizedName    String?
  slug              String
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)

  @@id([workoutTemplateId, language])
  @@index([language])
}

// Exercise within a workout template
model TemplateExercise {
  id                String          @id @default(uuid())
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  workoutTemplateId String
  exercise          Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Restrict)
  exerciseId        String
  order             Int // Order within the workout
  templateSets      TemplateSets[]

  @@unique([workoutTemplateId, order])
  @@index([exerciseId])
}

// Planned sets for template exercises
model TemplateSets {
  id                 String           @id @default(uuid())
  templateExercise   TemplateExercise @relation(fields: [templateExerciseId], references: [id], onDelete: Cascade)
  templateExerciseId String
  restTime           Int? // Rest time after this set (seconds).
  isWarmup           Boolean          @default(false)
  isDropSet          Boolean          @default(false)
  isUntilFailure     Boolean          @default(false)
  setNumber          Int // 1, 2, 3, etc.

  @@unique([templateExerciseId, setNumber])
}

model WorkoutPlanTranslation {
  workoutPlanId  String
  language       Language
  name           String
  normalizedName String?
  description    String?
  slug           String
  workoutPlan    WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)

  @@id([workoutPlanId, language])
  @@index([language])
}

enum WorkoutSessionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model WorkoutSession {
  id                 String               @id @default(uuid())
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  status             WorkoutSessionStatus
  notes              String? // Overall session notes
  startedAt          DateTime?            @db.Timestamptz(6) // When actually started
  completedAt        DateTime?            @db.Timestamptz(6) // When completed
  duration           Int? // Total duration in minutes
  workoutPlan        WorkoutPlan          @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  workoutPlanId      String
  workoutTemplate    WorkoutTemplate      @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  workoutTemplateId  String
  wasModified        Boolean              @default(false)
  modificationsSaved Boolean              @default(false) // Whether modifications were saved back to template
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @updatedAt @db.Timestamptz(6)
  sessionExercises   SessionExercise[] // Actual exercises performed
  // @@index([scheduledAt])

  @@index([userId, status])
  @@index([userId, startedAt])
  @@index([workoutPlanId])
  @@index([workoutTemplateId])
}

model SessionExercise {
  id                   String         @id @default(uuid())
  session              WorkoutSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId            String
  exercise             Exercise       @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId           String
  order                Int
  notes                String?
  exerciseNameSnapshot String
  performedSets        PerformedSet[]

  // @@unique([sessionId, order])
  @@index([exerciseId])
}

model PerformedSet {
  id                String          @id @default(uuid())
  sessionExercise   SessionExercise @relation(fields: [sessionExerciseId], references: [id], onDelete: Cascade)
  sessionExerciseId String
  setNumber         Int // 1, 2, 3, etc.

  // Performance data
  reps        Int?
  weight      Float? // in kg or lbs
  duration    Int? // in seconds
  distance    Float? // in km or miles
  restTime    Int? // actual rest time taken (seconds)
  // rpe         Int? // Rate of Perceived Exertion (1-10)
  isCompleted Boolean  @default(true)
  isWarmup    Boolean  @default(false)
  isDropSet   Boolean  @default(false)
  isFailure   Boolean  @default(false) // Set taken to failure
  // notes       String?
  performedAt DateTime @default(now()) @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([sessionExerciseId, setNumber])
  @@index([performedAt])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum BodyMeasurementCategory {
  COMPOSITION
  MUSCLE
  FAT
  WATER
  BONE
  VISCERAL
  METABOLIC
  OTHER
}

model BodyMeasurementType {
  id           Int                              @id @default(autoincrement())
  category     BodyMeasurementCategory
  name         String
  unit         String
  description  String?
  isActive     Boolean                          @default(true) // For soft delete
  createdAt    DateTime                         @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                         @updatedAt @db.Timestamptz(6)
  translations BodyMeasurementTypeTranslation[]
  measurements BodyMeasurement[]
}

model BodyMeasurementTypeTranslation {
  bodyMeasurementTypeId Int
  language              Language
  name                  String
  description           String?
  bodyMeasurementType   BodyMeasurementType @relation(fields: [bodyMeasurementTypeId], references: [id], onDelete: Cascade)

  @@id([bodyMeasurementTypeId, language])
  @@index([language])
}

model BodyMeasurement {
  id                String              @id @default(uuid())
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  measurementType   BodyMeasurementType @relation(fields: [measurementTypeId], references: [id], onDelete: Restrict) // Prevent deletion of type if in use
  measurementTypeId Int
  value             Float
  notes             String?
  date              DateTime            @db.Timestamptz(6) // Specific date of measurement
  createdAt         DateTime            @default(now()) @db.Timestamptz(6) // Log creation time
  updatedAt         DateTime            @updatedAt @db.Timestamptz(6)

  @@index([userId, date])
  @@index([userId, measurementTypeId, date])
}
