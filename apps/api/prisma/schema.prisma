// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
  // output   = "../../../packages/app/src/prisma-generated"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../../packages/app/src/prisma-generated.ts"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "../src/generated/"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgresql://bao:3246@localhost:5432/gymapp"
}

model Language {
  id          String        @id
  name        String        @unique
  isDefault   Boolean       @default(false)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
  texts       Text[]
  Translation Translation[]
}

model Text {
  id           Int           @id @default(autoincrement())
  key          String        @unique
  originalText String
  language     Language      @relation(fields: [languageId], references: [id])
  languageId   String
  translations Translation[]
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
}

model Translation {
  id         Int      @id @default(autoincrement())
  text       Text     @relation(fields: [textId], references: [id])
  textId     Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId String
  content    String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)

  @@unique([textId, languageId])
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  name        String
  gender      String?
  age         Int?
  password    String
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
  // deletedAt DateTime?
  Exercise    Exercise[]
  ExerciseLog ExerciseLog[]
  WorkoutPlan WorkoutPlan[]
  avatar      String?
}

model Post {
  id         Int      @id @default(autoincrement())
  titleKey   String // Reference to Text.key
  contentKey String? // Reference to Text.key
  published  Boolean? @default(false)
  authorId   Int?
}

enum ExerciseCategory {
  WEIGHT
  FREE_WEIGHT
  CARDIO
  TIME
  REPS
}

model MuscleGroup {
  id        Int        @id @default(autoincrement())
  parentId  Int?
  nameKey   String     @unique // Reference to Text.key
  slug      String     @unique
  image     String
  exercises Exercise[]
}

model Exercise {
  id             Int              @id @default(autoincrement())
  nameKey        String // Reference to Text.key
  descriptionKey String // Reference to Text.key
  category       ExerciseCategory
  primaryMuscle  MuscleGroup[]
  createdBy      User             @relation(fields: [createdById], references: [id])
  createdById    Int
  images         String[]
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(6)
  ExerciseLog    ExerciseLog[]
  Workout        Workout?         @relation(fields: [workoutId], references: [id])
  workoutId      Int?
  notesKey       String? // Reference to Text.key
}

model ExerciseLog {
  id          Int      @id @default(autoincrement())
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime
  repetitions Int
  weight      Float?
  notes       String?
}

enum WorkoutPlanLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutPlanCategory {
  STRENGTH
  ENDURANCE
  BALANCE
  FLEXIBILITY
  LOOSE_WEIGHT
}

model WorkoutPlan {
  id             Int                 @id @default(autoincrement())
  nameKey        String // Reference to Text.key
  cover_image    String?
  descriptionKey String? // Reference to Text.key
  level          WorkoutPlanLevel?
  isPublic       Boolean?            @default(true)
  isPremium      Boolean?            @default(false)
  isFeatured     Boolean?            @default(false)
  isSingle       Boolean?            @default(false)
  category       WorkoutPlanCategory
  workouts       Workout[]
  createdBy      User                @relation(fields: [createdById], references: [id])
  createdById    Int
  createdAt      DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime            @updatedAt @db.Timestamptz(6)
}

model Workout {
  id            Int         @id @default(autoincrement())
  nameKey       String // Reference to Text.key
  exercises     Exercise[]
  order         Int?
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt @db.Timestamptz(6)
  WorkoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int
}
