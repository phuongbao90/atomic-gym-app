generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
  // output   = "../../../packages/app/src/prisma-generated"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../../packages/app/src/prisma-generated.ts"
  dateType = "string"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "../src/generated/"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://bao:3246@localhost:5432/gymapp"
  // url      = env("DATABASE_URL")
}

enum Language {
  vi // Vietnamese (default/fallback)
  en // English
}

model User {
  id                String              @id
  name              String              @db.Text
  email             String
  emailVerified     Boolean
  image             String?             @db.Text
  createdAt         DateTime
  updatedAt         DateTime
  sessions          Session[]
  accounts          Account[]
  gender            String?
  age               Int?
  avatar            String?
  Exercise          Exercise[]
  WorkoutPlan       WorkoutPlan[]
  WorkoutSessionLog WorkoutSessionLog[]
  ExerciseSetLog    ExerciseSetLog[]
  BodyMeasurements  BodyMeasurement[]

  @@unique([email])
  @@map("user")
}

enum ExerciseCategory {
  WEIGHT
  FREE_WEIGHT
  CARDIO
}

model MuscleGroup {
  id             Int                      @id @default(autoincrement())
  parentId       Int?
  image          String
  exercises      Exercise[] // Exercises primarily targeting this muscle group
  translations   MuscleGroupTranslation[]
  ExerciseSetLog ExerciseSetLog[]
  isActive       Boolean                  @default(true) // For soft delete
}

model MuscleGroupTranslation {
  muscleGroupId  Int
  language       Language
  name           String
  normalizedName String?
  slug           String
  muscleGroup    MuscleGroup @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)

  @@id([muscleGroupId, language])
  @@index([language])
}

model Exercise {
  id               String                @id @default(uuid())
  notes            String?
  category         ExerciseCategory
  primaryMuscle    MuscleGroup[]
  createdBy        User                  @relation(fields: [createdById], references: [id])
  createdById      String
  images           String[]
  createdAt        DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime              @updatedAt @db.Timestamptz(6)
  translations     ExerciseTranslation[]
  workoutExercises WorkoutExercise[]
  ExerciseSetLog   ExerciseSetLog[]
  isActive         Boolean               @default(true) // For soft delete

  @@index([createdById])
}

model ExerciseTranslation {
  exerciseId     String
  language       Language
  name           String
  normalizedName String?
  description    String?
  slug           String
  exercise       Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@id([exerciseId, language])
  @@index([language])
}

enum WorkoutPlanLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutPlanCategory {
  STRENGTH
  ENDURANCE
  BALANCE
  FLEXIBILITY
  LOOSE_WEIGHT
}

model WorkoutPlan {
  id                String                   @id @default(uuid())
  cover_image       String?
  level             WorkoutPlanLevel?
  isPublic          Boolean?                 @default(true)
  isPremium         Boolean?                 @default(false)
  isFeatured        Boolean?                 @default(false)
  isSingle          Boolean?                 @default(false)
  category          WorkoutPlanCategory?
  workouts          Workout[]
  createdBy         User                     @relation(fields: [createdById], references: [id])
  createdById       String
  createdAt         DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                 @updatedAt @db.Timestamptz(6)
  translations      WorkoutPlanTranslation[]
  WorkoutSessionLog WorkoutSessionLog[]
  isActive          Boolean                  @default(true) // For soft delete

  @@index([createdById])
  @@index([level])
  @@index([category])
  @@index([isPublic])
  @@index([isFeatured])
}

model WorkoutPlanTranslation {
  workoutPlanId  String
  language       Language
  name           String
  normalizedName String?
  description    String?
  slug           String
  workoutPlan    WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)

  @@id([workoutPlanId, language])
  @@index([language])
}

model Workout {
  id                String               @id @default(uuid())
  order             Int? // Order of this workout within the plan
  createdAt         DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime             @updatedAt @db.Timestamptz(6)
  WorkoutPlan       WorkoutPlan          @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade) // If plan is deleted, its workouts are gone
  workoutPlanId     String
  translations      WorkoutTranslation[]
  workoutExercises  WorkoutExercise[]
  WorkoutSessionLog WorkoutSessionLog[]
  isActive          Boolean              @default(true) // For soft delete

  @@index([workoutPlanId])
}

model WorkoutTranslation {
  workoutId      String
  language       Language
  name           String
  normalizedName String?
  slug           String
  workout        Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@id([workoutId, language])
  @@index([language])
}

model ExerciseSet {
  id                String          @id @default(uuid())
  restTime          Int // in seconds
  isWarmup          Boolean         @default(false)
  isDropSet         Boolean         @default(false)
  isUntilFailure    Boolean         @default(false)
  WorkoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  workoutExerciseId String
}

model WorkoutExercise {
  id         String        @id @default(uuid())
  workout    Workout       @relation(fields: [workoutId], references: [id], onDelete: Cascade) // If workout is deleted, its exercise entries are gone
  workoutId  String
  exercise   Exercise      @relation(fields: [exerciseId], references: [id], onDelete: Restrict) // Prevent exercise deletion if used in workout structures
  exerciseId String
  order      Int // Position in workout
  sets       ExerciseSet[]
  notes      String? // Notes specific to this exercise in this workout, e.g., "Focus on form"

  @@unique([workoutId, exerciseId, order])
  @@index([exerciseId])
}

model WorkoutSessionLog {
  id                      String           @id @default(uuid())
  user                    User             @relation(fields: [userId], references: [id])
  userId                  String
  originalWorkoutPlanId   String
  originalWorkout         Workout          @relation(fields: [originalWorkoutId], references: [id], onDelete: Restrict) // Log should remain even if original workout is deleted (soft delete preferred)
  originalWorkoutId       String
  originalWorkoutPlan     WorkoutPlan      @relation(fields: [originalWorkoutPlanId], references: [id], onDelete: Restrict) // Log should remain even if original plan is deleted (soft delete preferred)
  workoutPlanNameSnapshot String?
  workoutNameSnapshot     String
  performedAt             DateTime         @default(now()) @db.Timestamptz(6) // Renamed from createdAt for clarity
  notes                   String? // User's notes for the overall session
  setLogs                 ExerciseSetLog[]
  duration                Int // Total duration in seconds

  @@index([userId, performedAt])
  @@index([originalWorkoutPlanId])
  @@index([originalWorkoutId])
}

model ExerciseSetLog {
  id                   String            @id @default(uuid())
  workoutSession       WorkoutSessionLog @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  workoutSessionId     String
  originalExercise     Exercise          @relation(fields: [originalExerciseId], references: [id], onDelete: Restrict) // Log should remain even if original exercise is deleted (soft delete preferred)
  originalExerciseId   String
  exerciseNameSnapshot String
  weight               Float? // Actual weight lifted
  repetitions          Int? // Actual repetitions performed
  distance             Float? // Actual distance covered
  duration             Int? // Actual duration of the set (e.g. for timed holds or cardio)
  order                Int // Order of the set in the exercise
  isCompleted          Boolean
  performedAt          DateTime          @default(now()) @db.Timestamptz(6) // Renamed from createdAt
  user                 User              @relation(fields: [userId], references: [id])
  userId               String
  muscleGroup          MuscleGroup       @relation(fields: [muscleGroupId], references: [id], onDelete: Restrict) // Protect muscle group if referenced in logs
  muscleGroupId        Int // Primary muscle group targeted by this exercise at the time of logging

  @@index([workoutSessionId])
  @@index([originalExerciseId])
  @@index([userId, performedAt])
  @@index([userId, originalExerciseId, performedAt])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum BodyMeasurementCategory {
  COMPOSITION
  MUSCLE
  FAT
  WATER
  BONE
  VISCERAL
  METABOLIC
  OTHER
}

model BodyMeasurementType {
  id           Int                              @id @default(autoincrement())
  category     BodyMeasurementCategory
  name         String
  unit         String
  description  String?
  isActive     Boolean                          @default(true) // For soft delete
  createdAt    DateTime                         @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                         @updatedAt @db.Timestamptz(6)
  translations BodyMeasurementTypeTranslation[]
  measurements BodyMeasurement[]
}

model BodyMeasurementTypeTranslation {
  bodyMeasurementTypeId Int
  language              Language
  name                  String
  description           String?
  bodyMeasurementType   BodyMeasurementType @relation(fields: [bodyMeasurementTypeId], references: [id], onDelete: Cascade)

  @@id([bodyMeasurementTypeId, language])
  @@index([language])
}

model BodyMeasurement {
  id                String              @id @default(uuid())
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  measurementType   BodyMeasurementType @relation(fields: [measurementTypeId], references: [id], onDelete: Restrict) // Prevent deletion of type if in use
  measurementTypeId Int
  value             Float
  notes             String?
  date              DateTime            @db.Timestamptz(6) // Specific date of measurement
  createdAt         DateTime            @default(now()) @db.Timestamptz(6) // Log creation time
  updatedAt         DateTime            @updatedAt @db.Timestamptz(6)

  @@index([userId, date])
  @@index([userId, measurementTypeId, date])
}
