generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
  // output   = "../../../packages/app/src/prisma-generated"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../../packages/app/src/prisma-generated.ts"
  dateType = "string"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "../src/generated/"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgresql://bao:3246@localhost:5432/gymapp"
}

enum Language {
  vi // Vietnamese (default/fallback)
  en // English
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  gender            String?
  age               Int?
  password          String
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @updatedAt @db.Timestamptz(6)
  Exercise          Exercise[]
  WorkoutPlan       WorkoutPlan[]
  avatar            String?
  WorkoutSessionLog WorkoutSessionLog[]
}

enum ExerciseCategory {
  WEIGHT
  FREE_WEIGHT
  CARDIO
  TIME
  REPS
}

model MuscleGroup {
  id           Int                      @id @default(autoincrement())
  parentId     Int?
  image        String
  exercises    Exercise[]
  translations MuscleGroupTranslation[]
}

model MuscleGroupTranslation {
  muscleGroupId  Int // foreign key to Exercise
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  slug           String
  muscleGroup    MuscleGroup @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)

  @@id([muscleGroupId, language]) // composite primary key for uniqueness
  @@index([language])
}

model Exercise {
  id               Int                   @id @default(autoincrement())
  notes            String?
  category         ExerciseCategory
  primaryMuscle    MuscleGroup[]
  createdBy        User                  @relation(fields: [createdById], references: [id])
  createdById      Int
  images           String[]
  createdAt        DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime              @updatedAt @db.Timestamptz(6)
  translations     ExerciseTranslation[]
  workoutExercises WorkoutExercise[]
  ExerciseSetLog   ExerciseSetLog[]
}

model ExerciseTranslation {
  exerciseId     Int // foreign key to Exercise
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  description    String? // localized description
  slug           String // localized description
  exercise       Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@id([exerciseId, language]) // composite primary key for uniqueness
  @@index([language])
}

enum WorkoutPlanLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutPlanCategory {
  STRENGTH
  ENDURANCE
  BALANCE
  FLEXIBILITY
  LOOSE_WEIGHT
}

model WorkoutPlan {
  id                String                   @id @default(uuid())
  cover_image       String?
  level             WorkoutPlanLevel?
  isPublic          Boolean?                 @default(true)
  isPremium         Boolean?                 @default(false)
  isFeatured        Boolean?                 @default(false)
  isSingle          Boolean?                 @default(false)
  category          WorkoutPlanCategory?
  workouts          Workout[]
  createdBy         User                     @relation(fields: [createdById], references: [id])
  createdById       Int
  createdAt         DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                 @updatedAt @db.Timestamptz(6)
  translations      WorkoutPlanTranslation[]
  WorkoutSessionLog WorkoutSessionLog[]
}

model WorkoutPlanTranslation {
  workoutPlanId  String // foreign key to WorkoutPlan
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  description    String? // localized description
  slug           String // localized description
  workoutPlan    WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)

  @@id([workoutPlanId, language]) // composite primary key for uniqueness
  @@index([language])
}

// NO NEED TO HAVE USER / CREATEDBY FIELD AS IT IS RELATED TO WORKOUT-PLAN
// AND WORKOUT-PLAN IS RELATED TO USER 
// IF OTHER USER WANT TO USE PLAN => THEY MUST CLONE IT AND CREATE IT AS A NEW WORKOUT PLAN
model Workout {
  id                String               @id @default(uuid())
  order             Int?
  createdAt         DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime             @updatedAt @db.Timestamptz(6)
  WorkoutPlan       WorkoutPlan          @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId     String
  translations      WorkoutTranslation[]
  workoutExercises  WorkoutExercise[]
  WorkoutSessionLog WorkoutSessionLog[]
}

model WorkoutTranslation {
  workoutId      String // foreign key to Workout
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  slug           String // localized name
  workout        Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@id([workoutId, language]) // composite primary key for uniqueness
  @@index([language])
}

// Set is related to exercise of workout , not exercise alone
model ExerciseSet {
  id                String          @id @default(uuid())
  restTime          Int
  isWarmup          Boolean         @default(false)
  isDropSet         Boolean         @default(false)
  isUntilFailure    Boolean         @default(false)
  WorkoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  workoutExerciseId String
}

model WorkoutExercise {
  id         String        @id @default(uuid())
  workout    Workout       @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  String
  exercise   Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  order      Int // Position in workout
  sets       ExerciseSet[]
  notes      String?

  @@unique([workoutId, exerciseId, order])
}

model WorkoutSessionLog {
  id            Int              @id @default(autoincrement())
  user          User             @relation(fields: [userId], references: [id])
  userId        Int
  workoutPlan   WorkoutPlan      @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId String
  workout       Workout          @relation(fields: [workoutId], references: [id])
  workoutId     String
  createdAt     DateTime?        @default(now()) @db.Timestamptz(6)
  notes         String?
  setLogs       ExerciseSetLog[]
  duration      Int
}

model ExerciseSetLog {
  id               Int               @id @default(autoincrement())
  workoutSession   WorkoutSessionLog @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  workoutSessionId Int
  exercise         Exercise          @relation(fields: [exerciseId], references: [id])
  exerciseId       Int
  weight           Float?
  repetitions      Int?
  distance         Float?
  duration         Int?
  isIncomplete     Boolean?          @default(false)
  createdAt        DateTime?         @default(now()) @db.Timestamptz(6)
}
