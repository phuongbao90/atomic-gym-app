generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
  // output   = "../../../packages/app/src/prisma-generated"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../../packages/app/src/prisma-generated.ts"
  dateType = "string"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "../src/generated/"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://bao:3246@localhost:5432/gymapp"
  // url      = env("DATABASE_URL")
}

enum Language {
  vi // Vietnamese (default/fallback)
  en // English
}

model User {
  id                String              @id
  name              String              @db.Text
  email             String
  emailVerified     Boolean
  image             String?             @db.Text
  createdAt         DateTime
  updatedAt         DateTime
  sessions          Session[]
  accounts          Account[]
  gender            String?
  age               Int?
  avatar            String?
  Exercise          Exercise[]
  WorkoutPlan       WorkoutPlan[]
  WorkoutSessionLog WorkoutSessionLog[]
  ExerciseSetLog    ExerciseSetLog[]
  BodyMeasurements  BodyMeasurement[]

  @@unique([email])
  @@map("user")
}

enum ExerciseCategory {
  WEIGHT
  FREE_WEIGHT
  CARDIO
}

model MuscleGroup {
  id             Int                      @id @default(autoincrement())
  parentId       Int?
  image          String
  exercises      Exercise[]
  translations   MuscleGroupTranslation[]
  ExerciseSetLog ExerciseSetLog[]
}

model MuscleGroupTranslation {
  muscleGroupId  Int // foreign key to Exercise
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  slug           String
  muscleGroup    MuscleGroup @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)

  // composite primary key for uniqueness
  @@id([muscleGroupId, language])
  @@index([language])
}

model Exercise {
  id               String                @id @default(uuid())
  notes            String?
  category         ExerciseCategory
  primaryMuscle    MuscleGroup[]
  createdBy        User                  @relation(fields: [createdById], references: [id])
  createdById      String
  images           String[]
  createdAt        DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime              @updatedAt @db.Timestamptz(6)
  translations     ExerciseTranslation[]
  workoutExercises WorkoutExercise[]
  ExerciseSetLog   ExerciseSetLog[]
}

model ExerciseTranslation {
  exerciseId     String // foreign key to Exercise
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  description    String? // localized description
  slug           String // localized description
  exercise       Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  // composite primary key for uniqueness
  @@id([exerciseId, language])
  @@index([language])
}

enum WorkoutPlanLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutPlanCategory {
  STRENGTH
  ENDURANCE
  BALANCE
  FLEXIBILITY
  LOOSE_WEIGHT
}

model WorkoutPlan {
  id                String                   @id @default(uuid())
  cover_image       String?
  level             WorkoutPlanLevel?
  isPublic          Boolean?                 @default(true)
  isPremium         Boolean?                 @default(false)
  isFeatured        Boolean?                 @default(false)
  isSingle          Boolean?                 @default(false)
  category          WorkoutPlanCategory?
  workouts          Workout[]
  createdBy         User                     @relation(fields: [createdById], references: [id])
  createdById       String
  createdAt         DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                 @updatedAt @db.Timestamptz(6)
  translations      WorkoutPlanTranslation[]
  WorkoutSessionLog WorkoutSessionLog[]
}

model WorkoutPlanTranslation {
  workoutPlanId  String // foreign key to WorkoutPlan
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  description    String? // localized description
  slug           String // localized description
  workoutPlan    WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)

  // composite primary key for uniqueness
  @@id([workoutPlanId, language])
  @@index([language])
}

// NO NEED TO HAVE USER / CREATEDBY FIELD AS IT IS RELATED TO WORKOUT-PLAN
// AND WORKOUT-PLAN IS RELATED TO USER 
// IF OTHER USER WANT TO USE PLAN => THEY MUST CLONE IT AND CREATE IT AS A NEW WORKOUT PLAN

model Workout {
  id                String               @id @default(uuid())
  order             Int?
  createdAt         DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime             @updatedAt @db.Timestamptz(6)
  WorkoutPlan       WorkoutPlan          @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId     String
  translations      WorkoutTranslation[]
  workoutExercises  WorkoutExercise[]
  WorkoutSessionLog WorkoutSessionLog[]
}

model WorkoutTranslation {
  workoutId      String // foreign key to Workout
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  slug           String // localized name
  workout        Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  // composite primary key for uniqueness
  @@id([workoutId, language])
  @@index([language])
}

// Set is related to exercise of workout , not exercise alone

model ExerciseSet {
  id                String          @id @default(uuid())
  restTime          Int
  isWarmup          Boolean         @default(false)
  isDropSet         Boolean         @default(false)
  isUntilFailure    Boolean         @default(false)
  WorkoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  workoutExerciseId String
}

model WorkoutExercise {
  id         String        @id @default(uuid())
  workout    Workout       @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  String
  exercise   Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId String
  order      Int // Position in workout
  sets       ExerciseSet[]
  notes      String?

  @@unique([workoutId, exerciseId, order])
}

model WorkoutSessionLog {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  workoutPlan   WorkoutPlan      @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId String
  workout       Workout          @relation(fields: [workoutId], references: [id])
  workoutId     String
  createdAt     DateTime?        @default(now()) @db.Timestamptz(6)
  notes         String?
  setLogs       ExerciseSetLog[]
  duration      Int
}

model ExerciseSetLog {
  id               String            @id @default(uuid())
  workoutSession   WorkoutSessionLog @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  workoutSessionId String
  exercise         Exercise          @relation(fields: [exerciseId], references: [id])
  exerciseId       String
  weight           Float?
  repetitions      Int?
  distance         Float?
  duration         Int?
  isIncomplete     Boolean?          @default(false)
  createdAt        DateTime?         @default(now()) @db.Timestamptz(6)
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  muscleGroupId    Int
  muscleGroup      MuscleGroup       @relation(fields: [muscleGroupId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum BodyMeasurementCategory {
  COMPOSITION
  MUSCLE
  FAT
  WATER
  BONE
  VISCERAL
  METABOLIC
  OTHER
}

model BodyMeasurementType {
  id           Int                              @id @default(autoincrement())
  category     BodyMeasurementCategory
  name         String
  unit         String
  description  String?
  isActive     Boolean                          @default(true)
  createdAt    DateTime                         @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                         @updatedAt @db.Timestamptz(6)
  translations BodyMeasurementTypeTranslation[]
  measurements BodyMeasurement[]
}

model BodyMeasurementTypeTranslation {
  bodyMeasurementTypeId Int
  language              Language
  name                  String
  description           String?
  bodyMeasurementType   BodyMeasurementType @relation(fields: [bodyMeasurementTypeId], references: [id], onDelete: Cascade)

  @@id([bodyMeasurementTypeId, language])
  @@index([language])
}

model BodyMeasurement {
  id                String              @id @default(uuid())
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  measurementType   BodyMeasurementType @relation(fields: [measurementTypeId], references: [id])
  measurementTypeId Int
  value             Float
  notes             String?
  date              DateTime            @db.Timestamptz(6)
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @updatedAt @db.Timestamptz(6)

  @@index([userId])
  @@index([measurementTypeId])
  @@index([createdAt])
}
