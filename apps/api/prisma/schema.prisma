// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
  // output   = "../../../packages/app/src/prisma-generated"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../../packages/app/src/prisma-generated.ts"
  dateType = "string"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "../src/generated/"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgresql://bao:3246@localhost:5432/gymapp"
}

enum Language {
  vi // Vietnamese (default/fallback)
  en // English
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  name        String
  gender      String?
  age         Int?
  password    String
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
  // deletedAt DateTime?
  Exercise    Exercise[]
  ExerciseLog ExerciseLog[]
  WorkoutPlan WorkoutPlan[]
  avatar      String?
}

model Post {
  id         Int      @id @default(autoincrement())
  titleKey   String // Reference to Text.key
  contentKey String? // Reference to Text.key
  published  Boolean? @default(false)
  authorId   Int?
}

enum ExerciseCategory {
  WEIGHT
  FREE_WEIGHT
  CARDIO
  TIME
  REPS
}

model MuscleGroup {
  id           Int                      @id @default(autoincrement())
  parentId     Int?
  image        String
  exercises    Exercise[]
  translations MuscleGroupTranslation[]
}

model MuscleGroupTranslation {
  muscleGroupId  Int // foreign key to Exercise
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  slug           String
  muscleGroup    MuscleGroup @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)

  @@id([muscleGroupId, language]) // composite primary key for uniqueness
  @@index([language])
}

model Exercise {
  id               Int                   @id @default(autoincrement())
  notes            String?
  category         ExerciseCategory
  primaryMuscle    MuscleGroup[]
  createdBy        User                  @relation(fields: [createdById], references: [id])
  createdById      Int
  images           String[]
  createdAt        DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime              @updatedAt @db.Timestamptz(6)
  ExerciseLog      ExerciseLog[]
  translations     ExerciseTranslation[]
  workoutExercises WorkoutExercise[]
}

model ExerciseTranslation {
  exerciseId     Int // foreign key to Exercise
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  description    String? // localized description
  slug           String // localized description
  exercise       Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@id([exerciseId, language]) // composite primary key for uniqueness
  @@index([language])
}

model ExerciseLog {
  id          Int      @id @default(autoincrement())
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime
  repetitions Int
  weight      Float?
  notes       String?
}

enum WorkoutPlanLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutPlanCategory {
  STRENGTH
  ENDURANCE
  BALANCE
  FLEXIBILITY
  LOOSE_WEIGHT
}

model WorkoutPlan {
  id           Int                      @id @default(autoincrement())
  cover_image  String?
  level        WorkoutPlanLevel?
  isPublic     Boolean?                 @default(true)
  isPremium    Boolean?                 @default(false)
  isFeatured   Boolean?                 @default(false)
  isSingle     Boolean?                 @default(false)
  category     WorkoutPlanCategory?
  workouts     Workout[]
  createdBy    User                     @relation(fields: [createdById], references: [id])
  createdById  Int
  createdAt    DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                 @updatedAt @db.Timestamptz(6)
  translations WorkoutPlanTranslation[]
}

model WorkoutPlanTranslation {
  workoutPlanId  Int // foreign key to WorkoutPlan
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  description    String? // localized description
  slug           String // localized description
  workoutPlan    WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)

  @@id([workoutPlanId, language]) // composite primary key for uniqueness
  @@index([language])
}

model Workout {
  id               Int                  @id @default(autoincrement())
  order            Int?
  createdAt        DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime             @updatedAt @db.Timestamptz(6)
  WorkoutPlan      WorkoutPlan          @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId    Int
  translations     WorkoutTranslation[]
  workoutExercises WorkoutExercise[]
}

model WorkoutTranslation {
  workoutId      Int // foreign key to Workout
  language       Language // language code (e.g., 'vi', 'en')
  name           String // localized name
  normalizedName String? // localized name
  slug           String // localized name
  workout        Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@id([workoutId, language]) // composite primary key for uniqueness
  @@index([language])
}

// Set is related to exercise of workout , not exercise alone
model ExerciseSet {
  id                Int             @id @default(autoincrement())
  restTime          Int
  isWarmup          Boolean         @default(false)
  isDropSet         Boolean         @default(false)
  isUntilFailure    Boolean         @default(false)
  WorkoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  workoutExerciseId Int
}

model WorkoutExercise {
  id         Int           @id @default(autoincrement())
  workout    Workout       @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  Int
  exercise   Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  order      Int // Position in workout
  sets       ExerciseSet[]

  @@unique([workoutId, exerciseId, order])
}
